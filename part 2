
                               #trackbar
import cv2
import numpy as np

def nothing(x):
    pass

img = np.zeros((300,512,3), np.uint8)
cv2.namedWindow('image')

cv2.createTrackbar('R' , 'image', 0, 255, nothing)
cv2.createTrackbar('G', 'image', 0, 255, nothing)
cv2.createTrackbar('B' , 'image', 0, 255, nothing)

switch = '0 : OFF \n1 : ON'
cv2.createTrackbar(switch, 'image' , 0, 1, nothing)

while(1):
    cv2.imshow('image', img)
    k = cv2.waitKey(1)
    if k == 27:
        break

    r = cv2.getTrackbarPos('R' , 'image')
    g = cv2.getTrackbarPos('G' , 'image')
    b = cv2.getTrackbarPos('B' , 'image')
    s = cv2.getTrackbarPos(switch , 'image')


    if s ==  0:
        img[:] = 0
    else:
        img[:] = [b, g,r]

cv2.destroyAllWindows()        







                             #code to detect object using color
import cv2
import numpy as np

def main():

    
    cap =  cv2.VideoCapture(0)

    if cap.isOpened():
        ret, frame = cap.read()
    else:
        ret= False

    while ret:
        ret, frame = cap.read()
        hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)         #hsv is more suitable for this purpose

        #BLUE COLOR
        low = np.array([100,50,50])
        high = np.array([140,255,255])                 #higher and lower range of color

        image_mask = cv2.inRange(hsv,low,high)         #*assigining low and high range of color*\

        print(image_mask)                             #printing value of mask
        cv2.imshow('image mask', image_mask)         
        cv2.imshow('originial webcam feed', frame)
        

        if cv2.waitKey(1) ==27:
         break
    cv2.destroyAllWindows()
    cap.release()

if __name__ == '__main__':
    main()

       
                        #[[codes for different color and color tracking as it is]]
mport cv2
import numpy as np

def main():

    
    cap =  cv2.VideoCapture(0)

    if cap.isOpened():
        ret, frame = cap.read()
    else:
        ret= False

    while ret:
        ret, frame = cap.read()
        hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

        #BLUE COLOR
  #      low = np.array([100,50,50])
   #     high = np.array([140,255,255])

        #green color                                                                  #choose any one of the color
     #   low = np.array([40,50,50])
    #    high = np.array([80,255,255])


        #red color
      #  low = np.array([140,150,0])
       # high = np.array([180,255,255])

        image_mask = cv2.inRange(hsv,low,high)                                   #trace and show the required color as white

        output = cv2.bitwise_and(frame,frame, mask = image_mask)                #trace and show thw same color

        cv2.imshow('image mask', image_mask)
        cv2.imshow('originial webcam feed', frame)
        cv2.imshow('color tracking', output)

        if cv2.waitKey(1) ==27:
         break
    cv2.destroyAllWindows()
    cap.release()

if __name__ == '__main__':
    main()





                                      #to display multiple image in a single window
import cv2
import matplotlib.pyplot as plt

def main():

    path = "C:\\Users\\user\\Downloads\\"
    imgpath1 = path + "bench-carved-stones-cemetery-257360.jpg"
    imgpath2 = path +  "bloom-blooming-blossom-462118.jpg"

    img1 =cv2.imread(imgpath1, 1)
    img2 = cv2.imread(imgpath2,1)

    img1 = cv2.cvtColor(img1, cv2.COLOR_BGR2RGB)
    img2 = cv2.cvtColor(img2, cv2.COLOR_BGR2RGB)


    plt.subplot(1,2,1)
    plt.imshow(img1)
    plt.title('stone BLOOM')
    plt.xticks([])
    plt.yticks([])
    

    plt.subplot(1,2,2)
    plt.imshow(img2)
    plt.title('BLOOM BLOOM')
    plt.xticks([])
    plt.yticks([])
    plt.show()

    
if __name__ =="__main__":
    main()




                               #to display multiple images using for loop
import cv2
import matplotlib.pyplot as plt

def main():

    path = "C:\\Users\\user\\Downloads\\"
    imgpath1 = path + "bench-carved-stones-cemetery-257360.jpg"
    imgpath2 = path +  "bloom-blooming-blossom-462118.jpg"

    img1 =cv2.imread(imgpath1, 1)
    img2 = cv2.imread(imgpath2,1)

    img1 = cv2.cvtColor(img1, cv2.COLOR_BGR2RGB)
    img2 = cv2.cvtColor(img2, cv2.COLOR_BGR2RGB)

    titles = ['stone bloom' , 'boom bloom']
    images = [img1, img2]
    

    for i in range(2):
        
        plt.subplot(1,2,i+1)
        plt.imshow(images[i])
        plt.title(titles[i])
        plt.xticks([])
        plt.yticks([])
    plt.show()

    cv2.waitKey(0)
    cv2.destroyAllWindows()
    
if __name__ =="__main__":
    main()



                                              #to apply geometry on images  
import cv2
import matplotlib.pyplot as plt

def main():

    path = "C:\\Users\\user\\Downloads\\"
    imgpath1 = path + "bench-carved-stones-cemetery-257360.jpg"
    imgpath2 = path +  "bloom-blooming-blossom-462118.jpg"

    img1 =cv2.imread(imgpath1, 1)
    img2 = cv2.imread(imgpath2,1)

    
    img1 = cv2.cvtColor(img1, cv2.COLOR_BGR2RGB)
    img2 = cv2.cvtColor(img2, cv2.COLOR_BGR2RGB)

    add = img1 + 10                                       #due to high resolution img1 +\*\-\/ img2 not possible
    sub = img2 - 90

    titles = ['stone bloom' , 'boom bloom', 'subtraction', 'addition']
    images = [img1, img2,  sub, add]
    

    for i in range(4):
        
        plt.subplot(2,2,i+1)
        plt.imshow(images[i])
        plt.title(titles[i])
        plt.xticks([])
        plt.yticks([])
    plt.show()

    cv2.waitKey(0)
    cv2.destroyAllWindows()
    
if __name__ =="__main__":
    main()



                                      #add image
import cv2
import matplotlib.pyplot as plt

def main():

    path = "C:\\Users\\user\\Downloads\\"
    imgpath1 = path + 'abc1.png'
    imgpath2 = path +  'abc2.png'

    img1 =cv2.imread(imgpath1, 1)
    img2 = cv2.imread(imgpath2,1)

    
    img1 = cv2.cvtColor(img1, cv2.COLOR_BGR2RGB)
    img2 = cv2.cvtColor(img2, cv2.COLOR_BGR2RGB)

    output = img1+ img2

    titles = ['stone bloom' , 'boom bloom','blend']
    images = [img1, img2, output]
    

    for i in range(3):
        
        plt.subplot(1,3,i+1)
        plt.imshow(images[i])
        plt.title(titles[i])
        plt.xticks([])
        plt.yticks([])
    plt.show()

    cv2.waitKey(0)
    cv2.destroyAllWindows()
    
if __name__ =="__main__":
    main()

       





                                    #hera pheri with pixels
import numpy as np
import cv2

img = cv2.imread( "C:/Users/user/Downloads/cropped bench symmetry.jpg")
px = img[55,55]                          #accessing color value of a particular pixel
print(px)

img[55, 55]= [255,255,255]                   #changing the color value of a pixel
px = img[55, 55]                             #assinging that value to pixel    
print(px)

roi = img[100:105, 100:105]             #printin a region of space of image(row,column)
print(roi)

img[100:155, 100:155] = [255,255,255]           #changing the color vaue of a region

stone = img[100:500, 600:800]
img[0:400, 0:200] = stone              #copying pixels of stone to some other pixels

cv2.imshow('anu', img)
cv2.waitKey(0)
cv2.destroyAllWindows()







                                  #MAKING BORDER ON IMAGE
import numpy as np
import cv2
import matplotlib.pyplot as plt

BLUE = [255,0,0]

img1 = cv2.imread( "G:/New folder (3)/New folder/IMG-20180613-WA0023.jpg")

img1 = cv2.cvtColor(img1, cv2.COLOR_BGR2RGB)

replicate = cv2.copyMakeBorder(img1, 30,30,30,30, cv2.BORDER_REPLICATE)
#aaaaa/abcdefgh/gfedcba
reflect= cv2.copyMakeBorder(img1,30,30,30,30, cv2.BORDER_REFLECT)
#fedcba/abcdefgh/hgfedcb
reflect101= cv2.copyMakeBorder(img1, 30,30,30,30, cv2.BORDER_REFLECT101)
#gfedcb/abcdefgh/gfedcba
wrap= cv2.copyMakeBorder(img1, 30,30,30,30, cv2.BORDER_WRAP)
# cdefgh/abcdefgh/abcdefg
constant = cv2.copyMakeBorder(img1, 10,10,10,10, cv2.BORDER_CONSTANT, value = BLUE)
#addd constant colour border, value should be giben as next argument(will convert bgr2 rgb)
TITLES =['ORIGINAL', 'REPLICATE',' REFLECT', 'REFLECT101', 'WRAP', 'CONSTANT']
IMAGES = [img1, replicate, reflect, reflect101, wrap, constant]

for i in range(6):
    plt.subplot(2,3,i+1)
    plt.title(TITLES[i])
    plt.imshow(IMAGES[i])
    plt.xticks([])
    plt.yticks([])
plt.show() 



cv2.waitKey(0)
cv2.destroyAllWindows()









                                                  #resize image
import numpy as np
import cv2



img1 = cv2.imread('G:/New folder (3)/New folder/IMG-20180613-WA0023.jpg')
img2 = cv2.imread("G:/New folder (3)/New folder/IMG-20180613-WA0024.jpg")
resize = cv2.resize(img2, (480,481),interpolation = cv2.INTER_AREA)             #dim(480,481)-width,height,interpolation
print(resize.shape)
cv2.imshow('resixe', resize)


cv2.waitKey(0)
cv2.destroyAllWindows()









                            #to add images
import numpy as np
import cv2



img1 = cv2.imread('G:/New folder (3)/New folder/IMG-20180613-WA0023.jpg')
img2 = cv2.imread("G:/New folder (3)/New folder/IMG-20180613-WA0024.jpg")
resize = cv2.resize(img2, (480,481),interpolation = cv2.INTER_AREA)

add = img1+ resize
cv2.imshow('add',add)       #numpy addition  i.e =250+10=260%256=4


add2 = cv2.add(img1,resize)      #cv addition i.e 250+10= 260 = 255
cv2.imshow('ffrevb', add2)         #cv addition wil give better result
cv2.waitKey(0)
cv2.destroyAllWindows()






                                    #bitwise operation
import numpy as np
import cv2



img1 = cv2.imread('G:/New folder (3)/New folder/IMG-20180613-WA0023.jpg')
img2 = cv2.imread("G:/New folder (3)/New folder/IMG-20180613-WA0024.jpg")
omg = cv2.resize(img2, (480,481),interpolation = cv2.INTER_AREA)

rows, cols, channels = omg.shape
roi = img1[ 0:rows, 0:cols]

omggray = cv2.cvtColor(omg, cv2.COLOR_BGR2GRAY)
ret, mask = cv2.threshold(omggray, 220,255,cv2.THRESH_BINARY_INV)

mask_inv = cv2.bitwise_not(mask)
img1_bg = cv2.bitwise_and(roi, roi, mask = mask_inv)
omg_fg = cv2.bitwise_and(omg,omg, mask = mask)

dst = cv2.add(img1_bg, omg_fg)
img1[0:rows, 0:cols] = dst
cv2.imshow('res',img1)
cv2.imshow('mask_inv', mask_inv)
cv2.imshow('img1_bg', img1_bg)
cv2.imshow('omg', omg_fg)
cv2.imshow('dst',dst)
cv2.waitKey(0)
cv2.destroyAllWindows()





                    #[[SAVING AND DISPLAYING MULTIPLE VIDEOS]]                                            
import cv2

def main():
    windowName = 'live video feed'
    cv2.namedWindow(windowName)
    cap = cv2.VideoCapture(0)

    filename1 = 'H:/ip3/anu.mp4'                    #we can give any name
    filename2 = 'H:/ip3/anuS.mp4'  
    codec = cv2.VideoWriter_fourcc('X', 'V', 'I', 'D')
    #codec - coding and decoding(encoding video)[XVID, H264, WMV2, WMV1, MJPG,DIVX - THESE ARE four character code used for this purpose 
    framerate = 250   #no. of images  per second(for persistence of vision at least 25 is needed)
    resolution = (640,480) 

    VideoFileOutput = cv2.VideoWriter(filename1, codec, framerate, resolution)
    VideoFileOutput2 = cv2.VideoWriter(filename2, codec, framerate, resolution)

    
    if cap.isOpened():
        ret, frame = cap.read()
        
    else:
        ret = False
        
    while   ret:  
        ret , frame = cap.read()
        fRAME2 = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        VideoFileOutput.write(frame)        #writing frame in output
        VideoFileOutput2.write(fRAME2)
        cv2.imshow(windowName,frame)                   #CHNGE THE WINDOW NAME FOR DIFFERENT VIDEOS OTHERWISE THEY WILL OPEN IN SAME ONE BY ONE
        cv2.imshow('BGR',fRAME2)
        if cv2.waitKey(1) == 27:
            break

    cv2.destroyAllWindows()
    VideoFileOutput.release()
    VideoFileOutput2.release()
    cap.release()

  

if __name__ =="__main__":
    main()
    



